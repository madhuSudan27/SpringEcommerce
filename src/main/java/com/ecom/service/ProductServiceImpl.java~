package com.ecom.service;

import com.ecom.exceptions.ResourceNotFoundException;
import com.ecom.model.Category;
import com.ecom.model.Product;
import com.ecom.payload.ProductDTO;
import com.ecom.payload.ProductResponse;
import com.ecom.repositories.CategoryRepository;
import com.ecom.repositories.ProductRepository;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.UUID;

@Service
public class ProductServiceImpl implements ProductService {

    @Autowired
    private CategoryRepository categoryRepository;

    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private ModelMapper modelMapper;

    @Autowired
    private FileService fileService;

    @Value("${project.image}")
    private String path;

    @Override
    public ProductDTO addProduct(ProductDTO productDTO, Long categoryId){
        // need to get the category from the database
        Category category = categoryRepository.findById(categoryId)
                .orElseThrow(() -> new ResourceNotFoundException("Category", "Categoryid", categoryId));

        // if category is found, set the category to the product
        Product product = modelMapper.map(productDTO, Product.class);

        product.setCategory(category);
        double specialPrice = product.getProductPrice() * (1 - product.getDiscount() / 100.0);
        product.setProductSpecialPrice(specialPrice);
        if(product.getProductImage() == null  || product.getProductImage().isEmpty()){
            product.setProductImage("default.jpg");
        }
        // save the product to the database
        Product savedProduct = productRepository.save(product);
        // return the saved product
        return modelMapper.map(savedProduct, ProductDTO.class);

    }

    // get all products
    public ProductResponse getAllProducts(){
        List<Product> products = productRepository.findAll();
        List<ProductDTO> productDTOs = products
                .stream()
                .map(product -> modelMapper.map(product, ProductDTO.class))
                .toList(); // <Product, ProductDTO>

        ProductResponse productResponse = new ProductResponse();
        productResponse.setProducts(productDTOs);

        return productResponse;
    }


    public ProductResponse getProductsByCategory(Long categoryId){

        // let's find the category in the database
        Category category = categoryRepository.findById(categoryId)
                .orElseThrow(() -> new ResourceNotFoundException("Category", "Categoryid", categoryId));

        List<Product> products = productRepository.findByCategoryOrderByProductPriceAsc(category);
        List<ProductDTO> productDTOs = products
                .stream()
                .map(product -> modelMapper.map(product, ProductDTO.class))
                .toList(); // <Product, ProductDTO>

        ProductResponse productResponse = new ProductResponse();
        productResponse.setProducts(productDTOs);
        return productResponse;


    }

    @Override
    public ProductResponse getProductByKeyword(String keyword) {
        // do a search in the database
        List<Product> products = productRepository.findByProductNameLikeIgnoreCase( '%' +keyword+ '%');

        List<ProductDTO> productDTOs = products.stream()
                .map(product -> modelMapper.map(product, ProductDTO.class))
                .toList(); // <Product, ProductDTO>

        ProductResponse productResponse = new ProductResponse();
        productResponse.setProducts(productDTOs);

        return productResponse;
    }

    @Override
    public ProductDTO updateProduct(Long productId, ProductDTO productDTO) {
        // find the product in the database
        Product existingProduct = productRepository.findById(productId)
                .orElseThrow(() -> new ResourceNotFoundException("Product", "Productid", productId));


        // update the product

        Product product = modelMapper.map(productDTO, Product.class);
        existingProduct.setProductName(product.getProductName());
        existingProduct.setProductDescription(product.getProductDescription());
        existingProduct.setProductImage(product.getProductImage());
        existingProduct.setProductQuantity(product.getProductQuantity());
        existingProduct.setProductPrice(product.getProductPrice());
        existingProduct.setDiscount(product.getDiscount());
        double specialPrice = product.getProductPrice() * (1 - product.getDiscount() / 100.0);
        existingProduct.setProductSpecialPrice(specialPrice);

        // save the product to the database
        Product updatedProduct = productRepository.save(existingProduct);

        // return the updated product
        ProductDTO updatedProductDTO = modelMapper.map(updatedProduct, ProductDTO.class);
        return updatedProductDTO;
    }

    @Override
    public ProductDTO deleteProduct(Long productId) {
        // need to get the product from db;
        Product existingProduct = productRepository.findById(productId)
                .orElseThrow(()-> new ResourceNotFoundException("Product","productId" , productId));

        // if exists then delete from db
        productRepository.deleteById(productId);
        return modelMapper.map(existingProduct, ProductDTO.class);
    }

    @Override
    public ProductDTO updateProductImage(Long productId, MultipartFile file) throws IOException {
        // check whether product exists or not
        Product savedProduct = productRepository.findById(productId).
                orElseThrow(() -> new ResourceNotFoundException("Product" , "ProductId", productId));

        // upload image to server
        String fileName = fileService.uploadImage(path, file);

        // update the image
        savedProduct.setProductImage(fileName);
        // save to DB

        Product updatedProduct = productRepository.save(savedProduct);

        return modelMapper.map(updatedProduct, ProductDTO.class);
    }




}
