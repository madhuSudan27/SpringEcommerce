**Exception Handling**

    @ControllerAdvice tells Spring this class contains global exception handlers.
    @ExceptionHandler(MethodArgumentNotValidException.class) tells Spring: whenever validation fails, call this method.

    e.getBindingResult() â†’ gives you all validation results.
    e.getBindingResult().getFieldErrors() â†’ list of all field-level validation errors.
        
**ModelMapper**

        ModelMapper modelMapper = new ModelMapper();
        OrderDTO orderDTO = modelMapper.map(order, OrderDTO.class);
-   How we are using
    ```
      List<CategoryDTO> categoriesDTOS = categories.stream()
      .map(category -> modelMapper.map(category, CategoryDTO.class))
      .toList();
    ```



### ðŸ”¹ Query Parameters

| Name        | Type | Required | Default | Description                           |
|-------------|------|----------|---------|---------------------------------------|
| `pageNumber` | int  | No       | `0`     | Page index for pagination             |
| `pageSize`   | int  | No       | `10`    | Number of items per page              |

### ðŸ”¹ Behavior
- If parameters are **not provided**, Spring uses the `defaultValue`.
- If negative values are passed â†’ **400 Bad Request** is returned.
- Returns paginated list of categories wrapped in `CategoryResponse`.

### ðŸ”¹ Example Requests
- Default values:  
  â†’ Fetches page `0` with `10` items.

- With custom params:  
  â†’ Fetches page `1` with `5` items.

### ðŸ”¹ Notes
- `@RequestParam(defaultValue = "...")` â†’ makes a parameter **optional**.
- `@RequestParam(required = true)` (without `defaultValue`) â†’ makes a parameter **mandatory**.  
